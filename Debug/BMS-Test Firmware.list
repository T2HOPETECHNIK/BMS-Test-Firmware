
BMS-Test Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021c8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002374  08002374  00012374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023b4  080023b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080023b4  080023b4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023b4  080023b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023b4  080023b4  000123b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023b8  080023b8  000123b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  080023c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  080023c8  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aae0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b69  00000000  00000000  0002ab1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0002c688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  0002cfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027fb1  00000000  00000000  0002d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a517  00000000  00000000  00055791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3875  00000000  00000000  0005fca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015351d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000237c  00000000  00000000  00153570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800235c 	.word	0x0800235c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	0800235c 	.word	0x0800235c

080001ec <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80001f0:	4b17      	ldr	r3, [pc, #92]	; (8000250 <MX_CAN1_Init+0x64>)
 80001f2:	4a18      	ldr	r2, [pc, #96]	; (8000254 <MX_CAN1_Init+0x68>)
 80001f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80001f6:	4b16      	ldr	r3, [pc, #88]	; (8000250 <MX_CAN1_Init+0x64>)
 80001f8:	2210      	movs	r2, #16
 80001fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80001fc:	4b14      	ldr	r3, [pc, #80]	; (8000250 <MX_CAN1_Init+0x64>)
 80001fe:	2200      	movs	r2, #0
 8000200:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000202:	4b13      	ldr	r3, [pc, #76]	; (8000250 <MX_CAN1_Init+0x64>)
 8000204:	2200      	movs	r2, #0
 8000206:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000208:	4b11      	ldr	r3, [pc, #68]	; (8000250 <MX_CAN1_Init+0x64>)
 800020a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800020e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000210:	4b0f      	ldr	r3, [pc, #60]	; (8000250 <MX_CAN1_Init+0x64>)
 8000212:	2200      	movs	r2, #0
 8000214:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000216:	4b0e      	ldr	r3, [pc, #56]	; (8000250 <MX_CAN1_Init+0x64>)
 8000218:	2200      	movs	r2, #0
 800021a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800021c:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <MX_CAN1_Init+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000222:	4b0b      	ldr	r3, [pc, #44]	; (8000250 <MX_CAN1_Init+0x64>)
 8000224:	2200      	movs	r2, #0
 8000226:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <MX_CAN1_Init+0x64>)
 800022a:	2200      	movs	r2, #0
 800022c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800022e:	4b08      	ldr	r3, [pc, #32]	; (8000250 <MX_CAN1_Init+0x64>)
 8000230:	2200      	movs	r2, #0
 8000232:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <MX_CAN1_Init+0x64>)
 8000236:	2200      	movs	r2, #0
 8000238:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800023a:	4805      	ldr	r0, [pc, #20]	; (8000250 <MX_CAN1_Init+0x64>)
 800023c:	f000 fdc2 	bl	8000dc4 <HAL_CAN_Init>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000246:	f000 fc17 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800024a:	bf00      	nop
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000044 	.word	0x20000044
 8000254:	40006400 	.word	0x40006400

08000258 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b08a      	sub	sp, #40	; 0x28
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000260:	f107 0314 	add.w	r3, r7, #20
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a18      	ldr	r2, [pc, #96]	; (80002d8 <HAL_CAN_MspInit+0x80>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d129      	bne.n	80002ce <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800027a:	4b18      	ldr	r3, [pc, #96]	; (80002dc <HAL_CAN_MspInit+0x84>)
 800027c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800027e:	4a17      	ldr	r2, [pc, #92]	; (80002dc <HAL_CAN_MspInit+0x84>)
 8000280:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000284:	6593      	str	r3, [r2, #88]	; 0x58
 8000286:	4b15      	ldr	r3, [pc, #84]	; (80002dc <HAL_CAN_MspInit+0x84>)
 8000288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800028a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800028e:	613b      	str	r3, [r7, #16]
 8000290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000292:	4b12      	ldr	r3, [pc, #72]	; (80002dc <HAL_CAN_MspInit+0x84>)
 8000294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000296:	4a11      	ldr	r2, [pc, #68]	; (80002dc <HAL_CAN_MspInit+0x84>)
 8000298:	f043 0301 	orr.w	r3, r3, #1
 800029c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800029e:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <HAL_CAN_MspInit+0x84>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a2:	f003 0301 	and.w	r3, r3, #1
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80002aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80002ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002b0:	2302      	movs	r3, #2
 80002b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002b8:	2303      	movs	r3, #3
 80002ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80002bc:	2309      	movs	r3, #9
 80002be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c0:	f107 0314 	add.w	r3, r7, #20
 80002c4:	4619      	mov	r1, r3
 80002c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ca:	f000 ff5d 	bl	8001188 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80002ce:	bf00      	nop
 80002d0:	3728      	adds	r7, #40	; 0x28
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40006400 	.word	0x40006400
 80002dc:	40021000 	.word	0x40021000

080002e0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b08a      	sub	sp, #40	; 0x28
 80002e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e6:	f107 0314 	add.w	r3, r7, #20
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f6:	4b6d      	ldr	r3, [pc, #436]	; (80004ac <MX_GPIO_Init+0x1cc>)
 80002f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fa:	4a6c      	ldr	r2, [pc, #432]	; (80004ac <MX_GPIO_Init+0x1cc>)
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000302:	4b6a      	ldr	r3, [pc, #424]	; (80004ac <MX_GPIO_Init+0x1cc>)
 8000304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000306:	f003 0304 	and.w	r3, r3, #4
 800030a:	613b      	str	r3, [r7, #16]
 800030c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800030e:	4b67      	ldr	r3, [pc, #412]	; (80004ac <MX_GPIO_Init+0x1cc>)
 8000310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000312:	4a66      	ldr	r2, [pc, #408]	; (80004ac <MX_GPIO_Init+0x1cc>)
 8000314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800031a:	4b64      	ldr	r3, [pc, #400]	; (80004ac <MX_GPIO_Init+0x1cc>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000326:	4b61      	ldr	r3, [pc, #388]	; (80004ac <MX_GPIO_Init+0x1cc>)
 8000328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032a:	4a60      	ldr	r2, [pc, #384]	; (80004ac <MX_GPIO_Init+0x1cc>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000332:	4b5e      	ldr	r3, [pc, #376]	; (80004ac <MX_GPIO_Init+0x1cc>)
 8000334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	60bb      	str	r3, [r7, #8]
 800033c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800033e:	4b5b      	ldr	r3, [pc, #364]	; (80004ac <MX_GPIO_Init+0x1cc>)
 8000340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000342:	4a5a      	ldr	r2, [pc, #360]	; (80004ac <MX_GPIO_Init+0x1cc>)
 8000344:	f043 0302 	orr.w	r3, r3, #2
 8000348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800034a:	4b58      	ldr	r3, [pc, #352]	; (80004ac <MX_GPIO_Init+0x1cc>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034e:	f003 0302 	and.w	r3, r3, #2
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000356:	4b55      	ldr	r3, [pc, #340]	; (80004ac <MX_GPIO_Init+0x1cc>)
 8000358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035a:	4a54      	ldr	r2, [pc, #336]	; (80004ac <MX_GPIO_Init+0x1cc>)
 800035c:	f043 0308 	orr.w	r3, r3, #8
 8000360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000362:	4b52      	ldr	r3, [pc, #328]	; (80004ac <MX_GPIO_Init+0x1cc>)
 8000364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000366:	f003 0308 	and.w	r3, r3, #8
 800036a:	603b      	str	r3, [r7, #0]
 800036c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WDT_WDI_Pin|BAT_100_Pin|BAL_B2_Pin|BAL_B1_Pin
 800036e:	2200      	movs	r2, #0
 8000370:	f248 3190 	movw	r1, #33680	; 0x8390
 8000374:	484e      	ldr	r0, [pc, #312]	; (80004b0 <MX_GPIO_Init+0x1d0>)
 8000376:	f001 f8b1 	bl	80014dc <HAL_GPIO_WritePin>
                          |BAL_B0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BAT_25_Pin|BAT_50_Pin|BAT_75_Pin, GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	21e0      	movs	r1, #224	; 0xe0
 800037e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000382:	f001 f8ab 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_ADC_CS2_Pin|SPI2_EEPROM_CS1_Pin, GPIO_PIN_RESET);
 8000386:	2200      	movs	r2, #0
 8000388:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800038c:	4849      	ldr	r0, [pc, #292]	; (80004b4 <MX_GPIO_Init+0x1d4>)
 800038e:	f001 f8a5 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = BATY_B_Pin|BATX_B_Pin|DONE_A_Pin|BAL_A_Pin
 8000392:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8000396:	617b      	str	r3, [r7, #20]
                          |UVFLT_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039c:	2300      	movs	r3, #0
 800039e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003a0:	f107 0314 	add.w	r3, r7, #20
 80003a4:	4619      	mov	r1, r3
 80003a6:	4842      	ldr	r0, [pc, #264]	; (80004b0 <MX_GPIO_Init+0x1d0>)
 80003a8:	f000 feee 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = WDT_WDI_Pin|BAT_100_Pin|BAL_B2_Pin|BAL_B1_Pin
 80003ac:	f248 3390 	movw	r3, #33680	; 0x8390
 80003b0:	617b      	str	r3, [r7, #20]
                          |BAL_B0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b2:	2301      	movs	r3, #1
 80003b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ba:	2300      	movs	r3, #0
 80003bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003be:	f107 0314 	add.w	r3, r7, #20
 80003c2:	4619      	mov	r1, r3
 80003c4:	483a      	ldr	r0, [pc, #232]	; (80004b0 <MX_GPIO_Init+0x1d0>)
 80003c6:	f000 fedf 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC5 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003ca:	236f      	movs	r3, #111	; 0x6f
 80003cc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003ce:	2303      	movs	r3, #3
 80003d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003d6:	f107 0314 	add.w	r3, r7, #20
 80003da:	4619      	mov	r1, r3
 80003dc:	4834      	ldr	r0, [pc, #208]	; (80004b0 <MX_GPIO_Init+0x1d0>)
 80003de:	f000 fed3 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003e2:	f240 731f 	movw	r3, #1823	; 0x71f
 80003e6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e8:	2303      	movs	r3, #3
 80003ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f0:	f107 0314 	add.w	r3, r7, #20
 80003f4:	4619      	mov	r1, r3
 80003f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fa:	f000 fec5 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BAT_25_Pin|BAT_50_Pin|BAT_75_Pin;
 80003fe:	23e0      	movs	r3, #224	; 0xe0
 8000400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000402:	2301      	movs	r3, #1
 8000404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000406:	2300      	movs	r3, #0
 8000408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040a:	2300      	movs	r3, #0
 800040c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040e:	f107 0314 	add.w	r3, r7, #20
 8000412:	4619      	mov	r1, r3
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f000 feb6 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
 800041c:	f240 4307 	movw	r3, #1031	; 0x407
 8000420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000422:	2303      	movs	r3, #3
 8000424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042a:	f107 0314 	add.w	r3, r7, #20
 800042e:	4619      	mov	r1, r3
 8000430:	4820      	ldr	r0, [pc, #128]	; (80004b4 <MX_GPIO_Init+0x1d4>)
 8000432:	f000 fea9 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_ADC_CS2_Pin|SPI2_EEPROM_CS1_Pin;
 8000436:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800043a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043c:	2301      	movs	r3, #1
 800043e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000444:	2300      	movs	r3, #0
 8000446:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000448:	f107 0314 	add.w	r3, r7, #20
 800044c:	4619      	mov	r1, r3
 800044e:	4819      	ldr	r0, [pc, #100]	; (80004b4 <MX_GPIO_Init+0x1d4>)
 8000450:	f000 fe9a 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PTCFLT_A_Pin;
 8000454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800045a:	2300      	movs	r3, #0
 800045c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	2300      	movs	r3, #0
 8000460:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PTCFLT_A_GPIO_Port, &GPIO_InitStruct);
 8000462:	f107 0314 	add.w	r3, r7, #20
 8000466:	4619      	mov	r1, r3
 8000468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046c:	f000 fe8c 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OVFLT_A_Pin;
 8000470:	2304      	movs	r3, #4
 8000472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000474:	2300      	movs	r3, #0
 8000476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OVFLT_A_GPIO_Port, &GPIO_InitStruct);
 800047c:	f107 0314 	add.w	r3, r7, #20
 8000480:	4619      	mov	r1, r3
 8000482:	480d      	ldr	r0, [pc, #52]	; (80004b8 <MX_GPIO_Init+0x1d8>)
 8000484:	f000 fe80 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BATY_A_Pin|BATX_A_Pin|PTCFLT_B_Pin|DONE_B_Pin
 8000488:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800048c:	617b      	str	r3, [r7, #20]
                          |BAL_B_Pin|UVFLT_B_Pin|OVFLT_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800048e:	2300      	movs	r3, #0
 8000490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000496:	f107 0314 	add.w	r3, r7, #20
 800049a:	4619      	mov	r1, r3
 800049c:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_GPIO_Init+0x1d4>)
 800049e:	f000 fe73 	bl	8001188 <HAL_GPIO_Init>

}
 80004a2:	bf00      	nop
 80004a4:	3728      	adds	r7, #40	; 0x28
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000
 80004b0:	48000800 	.word	0x48000800
 80004b4:	48000400 	.word	0x48000400
 80004b8:	48000c00 	.word	0x48000c00

080004bc <bal_bat_get>:

/* USER CODE BEGIN 2 */
void bal_bat_get()
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	if (DONE_B_stat == 0)
 80004c0:	2140      	movs	r1, #64	; 0x40
 80004c2:	48a2      	ldr	r0, [pc, #648]	; (800074c <bal_bat_get+0x290>)
 80004c4:	f000 fff2 	bl	80014ac <HAL_GPIO_ReadPin>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d106      	bne.n	80004dc <bal_bat_get+0x20>
	{
		balancer_state[0].operation = 0;
 80004ce:	4ba0      	ldr	r3, [pc, #640]	; (8000750 <bal_bat_get+0x294>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]
		balancer_state[0].done = 1;
 80004d4:	4b9e      	ldr	r3, [pc, #632]	; (8000750 <bal_bat_get+0x294>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	705a      	strb	r2, [r3, #1]
 80004da:	e098      	b.n	800060e <bal_bat_get+0x152>
	}
	else if(DONE_B_stat == 1 && BAL_B_stat == 0)
 80004dc:	2140      	movs	r1, #64	; 0x40
 80004de:	489b      	ldr	r0, [pc, #620]	; (800074c <bal_bat_get+0x290>)
 80004e0:	f000 ffe4 	bl	80014ac <HAL_GPIO_ReadPin>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	f040 8091 	bne.w	800060e <bal_bat_get+0x152>
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	4897      	ldr	r0, [pc, #604]	; (800074c <bal_bat_get+0x290>)
 80004f0:	f000 ffdc 	bl	80014ac <HAL_GPIO_ReadPin>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	f040 8089 	bne.w	800060e <bal_bat_get+0x152>
	{
		balancer_state[0].operation = 1;
 80004fc:	4b94      	ldr	r3, [pc, #592]	; (8000750 <bal_bat_get+0x294>)
 80004fe:	2201      	movs	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
		balancer_state[0].done = 0;
 8000502:	4b93      	ldr	r3, [pc, #588]	; (8000750 <bal_bat_get+0x294>)
 8000504:	2200      	movs	r2, #0
 8000506:	705a      	strb	r2, [r3, #1]

		if (BATX_B_stat == 1 && BATY_B_stat == 1)
 8000508:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800050c:	4891      	ldr	r0, [pc, #580]	; (8000754 <bal_bat_get+0x298>)
 800050e:	f000 ffcd 	bl	80014ac <HAL_GPIO_ReadPin>
 8000512:	4603      	mov	r3, r0
 8000514:	2b01      	cmp	r3, #1
 8000516:	d118      	bne.n	800054a <bal_bat_get+0x8e>
 8000518:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051c:	488d      	ldr	r0, [pc, #564]	; (8000754 <bal_bat_get+0x298>)
 800051e:	f000 ffc5 	bl	80014ac <HAL_GPIO_ReadPin>
 8000522:	4603      	mov	r3, r0
 8000524:	2b01      	cmp	r3, #1
 8000526:	d110      	bne.n	800054a <bal_bat_get+0x8e>
		{
			bal_bat_update(0,1);
 8000528:	2101      	movs	r1, #1
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f914 	bl	8000758 <bal_bat_update>
			bal_bat_update(1,0);
 8000530:	2100      	movs	r1, #0
 8000532:	2001      	movs	r0, #1
 8000534:	f000 f910 	bl	8000758 <bal_bat_update>
			bal_bat_update(2,0);
 8000538:	2100      	movs	r1, #0
 800053a:	2002      	movs	r0, #2
 800053c:	f000 f90c 	bl	8000758 <bal_bat_update>
			bal_bat_update(3,0);
 8000540:	2100      	movs	r1, #0
 8000542:	2003      	movs	r0, #3
 8000544:	f000 f908 	bl	8000758 <bal_bat_update>
 8000548:	e061      	b.n	800060e <bal_bat_get+0x152>
		}
		else if (BATX_B_stat == 1 && BATY_B_stat == 0)
 800054a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054e:	4881      	ldr	r0, [pc, #516]	; (8000754 <bal_bat_get+0x298>)
 8000550:	f000 ffac 	bl	80014ac <HAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	2b01      	cmp	r3, #1
 8000558:	d118      	bne.n	800058c <bal_bat_get+0xd0>
 800055a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055e:	487d      	ldr	r0, [pc, #500]	; (8000754 <bal_bat_get+0x298>)
 8000560:	f000 ffa4 	bl	80014ac <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d110      	bne.n	800058c <bal_bat_get+0xd0>
		{
			bal_bat_update(0,0);
 800056a:	2100      	movs	r1, #0
 800056c:	2000      	movs	r0, #0
 800056e:	f000 f8f3 	bl	8000758 <bal_bat_update>
			bal_bat_update(1,1);
 8000572:	2101      	movs	r1, #1
 8000574:	2001      	movs	r0, #1
 8000576:	f000 f8ef 	bl	8000758 <bal_bat_update>
			bal_bat_update(2,0);
 800057a:	2100      	movs	r1, #0
 800057c:	2002      	movs	r0, #2
 800057e:	f000 f8eb 	bl	8000758 <bal_bat_update>
			bal_bat_update(3,0);
 8000582:	2100      	movs	r1, #0
 8000584:	2003      	movs	r0, #3
 8000586:	f000 f8e7 	bl	8000758 <bal_bat_update>
 800058a:	e040      	b.n	800060e <bal_bat_get+0x152>
		}
		else if (BATX_B_stat == 0 && BATY_B_stat == 0)
 800058c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000590:	4870      	ldr	r0, [pc, #448]	; (8000754 <bal_bat_get+0x298>)
 8000592:	f000 ff8b 	bl	80014ac <HAL_GPIO_ReadPin>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d118      	bne.n	80005ce <bal_bat_get+0x112>
 800059c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a0:	486c      	ldr	r0, [pc, #432]	; (8000754 <bal_bat_get+0x298>)
 80005a2:	f000 ff83 	bl	80014ac <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d110      	bne.n	80005ce <bal_bat_get+0x112>
		{
			bal_bat_update(0,0);
 80005ac:	2100      	movs	r1, #0
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f8d2 	bl	8000758 <bal_bat_update>
			bal_bat_update(1,0);
 80005b4:	2100      	movs	r1, #0
 80005b6:	2001      	movs	r0, #1
 80005b8:	f000 f8ce 	bl	8000758 <bal_bat_update>
			bal_bat_update(2,1);
 80005bc:	2101      	movs	r1, #1
 80005be:	2002      	movs	r0, #2
 80005c0:	f000 f8ca 	bl	8000758 <bal_bat_update>
			bal_bat_update(3,0);
 80005c4:	2100      	movs	r1, #0
 80005c6:	2003      	movs	r0, #3
 80005c8:	f000 f8c6 	bl	8000758 <bal_bat_update>
 80005cc:	e01f      	b.n	800060e <bal_bat_get+0x152>
		}
		else if (BATX_B_stat == 0 && BATY_B_stat == 1)
 80005ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d2:	4860      	ldr	r0, [pc, #384]	; (8000754 <bal_bat_get+0x298>)
 80005d4:	f000 ff6a 	bl	80014ac <HAL_GPIO_ReadPin>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d117      	bne.n	800060e <bal_bat_get+0x152>
 80005de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e2:	485c      	ldr	r0, [pc, #368]	; (8000754 <bal_bat_get+0x298>)
 80005e4:	f000 ff62 	bl	80014ac <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d10f      	bne.n	800060e <bal_bat_get+0x152>
		{
			bal_bat_update(0,0);
 80005ee:	2100      	movs	r1, #0
 80005f0:	2000      	movs	r0, #0
 80005f2:	f000 f8b1 	bl	8000758 <bal_bat_update>
			bal_bat_update(1,0);
 80005f6:	2100      	movs	r1, #0
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 f8ad 	bl	8000758 <bal_bat_update>
			bal_bat_update(2,0);
 80005fe:	2100      	movs	r1, #0
 8000600:	2002      	movs	r0, #2
 8000602:	f000 f8a9 	bl	8000758 <bal_bat_update>
			bal_bat_update(3,1);
 8000606:	2101      	movs	r1, #1
 8000608:	2003      	movs	r0, #3
 800060a:	f000 f8a5 	bl	8000758 <bal_bat_update>
		}
	}

	if (DONE_A_stat == 0)
 800060e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000612:	4850      	ldr	r0, [pc, #320]	; (8000754 <bal_bat_get+0x298>)
 8000614:	f000 ff4a 	bl	80014ac <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d106      	bne.n	800062c <bal_bat_get+0x170>
	{
		balancer_state[1].operation = 0;
 800061e:	4b4c      	ldr	r3, [pc, #304]	; (8000750 <bal_bat_get+0x294>)
 8000620:	2200      	movs	r2, #0
 8000622:	711a      	strb	r2, [r3, #4]
		balancer_state[1].done = 1;
 8000624:	4b4a      	ldr	r3, [pc, #296]	; (8000750 <bal_bat_get+0x294>)
 8000626:	2201      	movs	r2, #1
 8000628:	715a      	strb	r2, [r3, #5]
			bal_bat_update(3,0);
			bal_bat_update(4,0);
			bal_bat_update(5,1);
		}
	}
}
 800062a:	e08c      	b.n	8000746 <bal_bat_get+0x28a>
	else if (DONE_A_stat == 1 && BAL_A_stat == 0)
 800062c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000630:	4848      	ldr	r0, [pc, #288]	; (8000754 <bal_bat_get+0x298>)
 8000632:	f000 ff3b 	bl	80014ac <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	2b01      	cmp	r3, #1
 800063a:	f040 8084 	bne.w	8000746 <bal_bat_get+0x28a>
 800063e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000642:	4844      	ldr	r0, [pc, #272]	; (8000754 <bal_bat_get+0x298>)
 8000644:	f000 ff32 	bl	80014ac <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d17b      	bne.n	8000746 <bal_bat_get+0x28a>
		if (BATX_A_stat == 1 && BATY_A_stat == 1)
 800064e:	2110      	movs	r1, #16
 8000650:	483e      	ldr	r0, [pc, #248]	; (800074c <bal_bat_get+0x290>)
 8000652:	f000 ff2b 	bl	80014ac <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d117      	bne.n	800068c <bal_bat_get+0x1d0>
 800065c:	2108      	movs	r1, #8
 800065e:	483b      	ldr	r0, [pc, #236]	; (800074c <bal_bat_get+0x290>)
 8000660:	f000 ff24 	bl	80014ac <HAL_GPIO_ReadPin>
 8000664:	4603      	mov	r3, r0
 8000666:	2b01      	cmp	r3, #1
 8000668:	d110      	bne.n	800068c <bal_bat_get+0x1d0>
			bal_bat_update(2,1);
 800066a:	2101      	movs	r1, #1
 800066c:	2002      	movs	r0, #2
 800066e:	f000 f873 	bl	8000758 <bal_bat_update>
			bal_bat_update(3,0);
 8000672:	2100      	movs	r1, #0
 8000674:	2003      	movs	r0, #3
 8000676:	f000 f86f 	bl	8000758 <bal_bat_update>
			bal_bat_update(4,0);
 800067a:	2100      	movs	r1, #0
 800067c:	2004      	movs	r0, #4
 800067e:	f000 f86b 	bl	8000758 <bal_bat_update>
			bal_bat_update(5,0);
 8000682:	2100      	movs	r1, #0
 8000684:	2005      	movs	r0, #5
 8000686:	f000 f867 	bl	8000758 <bal_bat_update>
 800068a:	e05c      	b.n	8000746 <bal_bat_get+0x28a>
		else if (BATX_A_stat == 1 && BATY_A_stat == 0)
 800068c:	2110      	movs	r1, #16
 800068e:	482f      	ldr	r0, [pc, #188]	; (800074c <bal_bat_get+0x290>)
 8000690:	f000 ff0c 	bl	80014ac <HAL_GPIO_ReadPin>
 8000694:	4603      	mov	r3, r0
 8000696:	2b01      	cmp	r3, #1
 8000698:	d117      	bne.n	80006ca <bal_bat_get+0x20e>
 800069a:	2108      	movs	r1, #8
 800069c:	482b      	ldr	r0, [pc, #172]	; (800074c <bal_bat_get+0x290>)
 800069e:	f000 ff05 	bl	80014ac <HAL_GPIO_ReadPin>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d110      	bne.n	80006ca <bal_bat_get+0x20e>
			bal_bat_update(2,0);
 80006a8:	2100      	movs	r1, #0
 80006aa:	2002      	movs	r0, #2
 80006ac:	f000 f854 	bl	8000758 <bal_bat_update>
			bal_bat_update(3,1);
 80006b0:	2101      	movs	r1, #1
 80006b2:	2003      	movs	r0, #3
 80006b4:	f000 f850 	bl	8000758 <bal_bat_update>
			bal_bat_update(4,0);
 80006b8:	2100      	movs	r1, #0
 80006ba:	2004      	movs	r0, #4
 80006bc:	f000 f84c 	bl	8000758 <bal_bat_update>
			bal_bat_update(5,0);
 80006c0:	2100      	movs	r1, #0
 80006c2:	2005      	movs	r0, #5
 80006c4:	f000 f848 	bl	8000758 <bal_bat_update>
 80006c8:	e03d      	b.n	8000746 <bal_bat_get+0x28a>
		else if (BATX_A_stat == 0 && BATY_A_stat == 0)
 80006ca:	2110      	movs	r1, #16
 80006cc:	481f      	ldr	r0, [pc, #124]	; (800074c <bal_bat_get+0x290>)
 80006ce:	f000 feed 	bl	80014ac <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d117      	bne.n	8000708 <bal_bat_get+0x24c>
 80006d8:	2108      	movs	r1, #8
 80006da:	481c      	ldr	r0, [pc, #112]	; (800074c <bal_bat_get+0x290>)
 80006dc:	f000 fee6 	bl	80014ac <HAL_GPIO_ReadPin>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d110      	bne.n	8000708 <bal_bat_get+0x24c>
			bal_bat_update(2,0);
 80006e6:	2100      	movs	r1, #0
 80006e8:	2002      	movs	r0, #2
 80006ea:	f000 f835 	bl	8000758 <bal_bat_update>
			bal_bat_update(3,0);
 80006ee:	2100      	movs	r1, #0
 80006f0:	2003      	movs	r0, #3
 80006f2:	f000 f831 	bl	8000758 <bal_bat_update>
			bal_bat_update(4,1);
 80006f6:	2101      	movs	r1, #1
 80006f8:	2004      	movs	r0, #4
 80006fa:	f000 f82d 	bl	8000758 <bal_bat_update>
			bal_bat_update(5,0);
 80006fe:	2100      	movs	r1, #0
 8000700:	2005      	movs	r0, #5
 8000702:	f000 f829 	bl	8000758 <bal_bat_update>
 8000706:	e01e      	b.n	8000746 <bal_bat_get+0x28a>
		else if (BATX_A_stat == 0 && BATY_A_stat == 1)
 8000708:	2110      	movs	r1, #16
 800070a:	4810      	ldr	r0, [pc, #64]	; (800074c <bal_bat_get+0x290>)
 800070c:	f000 fece 	bl	80014ac <HAL_GPIO_ReadPin>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d117      	bne.n	8000746 <bal_bat_get+0x28a>
 8000716:	2108      	movs	r1, #8
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <bal_bat_get+0x290>)
 800071a:	f000 fec7 	bl	80014ac <HAL_GPIO_ReadPin>
 800071e:	4603      	mov	r3, r0
 8000720:	2b01      	cmp	r3, #1
 8000722:	d110      	bne.n	8000746 <bal_bat_get+0x28a>
			bal_bat_update(2,0);
 8000724:	2100      	movs	r1, #0
 8000726:	2002      	movs	r0, #2
 8000728:	f000 f816 	bl	8000758 <bal_bat_update>
			bal_bat_update(3,0);
 800072c:	2100      	movs	r1, #0
 800072e:	2003      	movs	r0, #3
 8000730:	f000 f812 	bl	8000758 <bal_bat_update>
			bal_bat_update(4,0);
 8000734:	2100      	movs	r1, #0
 8000736:	2004      	movs	r0, #4
 8000738:	f000 f80e 	bl	8000758 <bal_bat_update>
			bal_bat_update(5,1);
 800073c:	2101      	movs	r1, #1
 800073e:	2005      	movs	r0, #5
 8000740:	f000 f80a 	bl	8000758 <bal_bat_update>
}
 8000744:	e7ff      	b.n	8000746 <bal_bat_get+0x28a>
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	48000400 	.word	0x48000400
 8000750:	2000003c 	.word	0x2000003c
 8000754:	48000800 	.word	0x48000800

08000758 <bal_bat_update>:

void bal_bat_update(uint8_t id, uint8_t connect)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	460a      	mov	r2, r1
 8000762:	71fb      	strb	r3, [r7, #7]
 8000764:	4613      	mov	r3, r2
 8000766:	71bb      	strb	r3, [r7, #6]
	balancer_bat[id].connect = connect;
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	4937      	ldr	r1, [pc, #220]	; (8000848 <bal_bat_update+0xf0>)
 800076c:	4613      	mov	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	440b      	add	r3, r1
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	701a      	strb	r2, [r3, #0]
	if (UVFLT_A_stat == 0 || UVFLT_B_stat == 0)
 8000778:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800077c:	4833      	ldr	r0, [pc, #204]	; (800084c <bal_bat_update+0xf4>)
 800077e:	f000 fe95 	bl	80014ac <HAL_GPIO_ReadPin>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d007      	beq.n	8000798 <bal_bat_update+0x40>
 8000788:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078c:	4830      	ldr	r0, [pc, #192]	; (8000850 <bal_bat_update+0xf8>)
 800078e:	f000 fe8d 	bl	80014ac <HAL_GPIO_ReadPin>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d109      	bne.n	80007ac <bal_bat_update+0x54>
	{
		balancer_bat[id].under_volt = 1;
 8000798:	79fa      	ldrb	r2, [r7, #7]
 800079a:	492b      	ldr	r1, [pc, #172]	; (8000848 <bal_bat_update+0xf0>)
 800079c:	4613      	mov	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	4413      	add	r3, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	3302      	adds	r3, #2
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
 80007aa:	e008      	b.n	80007be <bal_bat_update+0x66>
	}
	else balancer_bat[id].under_volt = 0;
 80007ac:	79fa      	ldrb	r2, [r7, #7]
 80007ae:	4926      	ldr	r1, [pc, #152]	; (8000848 <bal_bat_update+0xf0>)
 80007b0:	4613      	mov	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	4413      	add	r3, r2
 80007b6:	440b      	add	r3, r1
 80007b8:	3302      	adds	r3, #2
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]

	if (OVFLT_A_stat == 0 || OVFLT_B_stat == 0)
 80007be:	2104      	movs	r1, #4
 80007c0:	4824      	ldr	r0, [pc, #144]	; (8000854 <bal_bat_update+0xfc>)
 80007c2:	f000 fe73 	bl	80014ac <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d007      	beq.n	80007dc <bal_bat_update+0x84>
 80007cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d0:	481f      	ldr	r0, [pc, #124]	; (8000850 <bal_bat_update+0xf8>)
 80007d2:	f000 fe6b 	bl	80014ac <HAL_GPIO_ReadPin>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d109      	bne.n	80007f0 <bal_bat_update+0x98>
	{
		balancer_bat[id].over_volt = 1;
 80007dc:	79fa      	ldrb	r2, [r7, #7]
 80007de:	491a      	ldr	r1, [pc, #104]	; (8000848 <bal_bat_update+0xf0>)
 80007e0:	4613      	mov	r3, r2
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	4413      	add	r3, r2
 80007e6:	440b      	add	r3, r1
 80007e8:	3301      	adds	r3, #1
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
 80007ee:	e008      	b.n	8000802 <bal_bat_update+0xaa>
	}
	else balancer_bat[id].under_volt = 0;
 80007f0:	79fa      	ldrb	r2, [r7, #7]
 80007f2:	4915      	ldr	r1, [pc, #84]	; (8000848 <bal_bat_update+0xf0>)
 80007f4:	4613      	mov	r3, r2
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	4413      	add	r3, r2
 80007fa:	440b      	add	r3, r1
 80007fc:	3302      	adds	r3, #2
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]

	if (PTCFLT_B_stat == 0)
 8000802:	2120      	movs	r1, #32
 8000804:	4812      	ldr	r0, [pc, #72]	; (8000850 <bal_bat_update+0xf8>)
 8000806:	f000 fe51 	bl	80014ac <HAL_GPIO_ReadPin>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d103      	bne.n	8000818 <bal_bat_update+0xc0>
	{
		balancer_state[0].ptc_fault = 1;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <bal_bat_update+0x100>)
 8000812:	2201      	movs	r2, #1
 8000814:	709a      	strb	r2, [r3, #2]
 8000816:	e002      	b.n	800081e <bal_bat_update+0xc6>
	}
	else balancer_state[0].ptc_fault = 0;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <bal_bat_update+0x100>)
 800081a:	2200      	movs	r2, #0
 800081c:	709a      	strb	r2, [r3, #2]

	if (PTCFLT_A_stat == 0)
 800081e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000826:	f000 fe41 	bl	80014ac <HAL_GPIO_ReadPin>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d103      	bne.n	8000838 <bal_bat_update+0xe0>
	{
		balancer_state[1].ptc_fault = 1;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <bal_bat_update+0x100>)
 8000832:	2201      	movs	r2, #1
 8000834:	719a      	strb	r2, [r3, #6]
	}
	else balancer_state[1].ptc_fault = 0;
}
 8000836:	e002      	b.n	800083e <bal_bat_update+0xe6>
	else balancer_state[1].ptc_fault = 0;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <bal_bat_update+0x100>)
 800083a:	2200      	movs	r2, #0
 800083c:	719a      	strb	r2, [r3, #6]
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000028 	.word	0x20000028
 800084c:	48000800 	.word	0x48000800
 8000850:	48000400 	.word	0x48000400
 8000854:	48000c00 	.word	0x48000c00
 8000858:	2000003c 	.word	0x2000003c

0800085c <bms_LED_update>:

void bms_LED_update()
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
	uint8_t ledx;

	for (int i=0; i<6; i++)
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	e00d      	b.n	8000884 <bms_LED_update+0x28>
	{
		if (balancer_bat[i].connect == 1)
 8000868:	4951      	ldr	r1, [pc, #324]	; (80009b0 <bms_LED_update+0x154>)
 800086a:	683a      	ldr	r2, [r7, #0]
 800086c:	4613      	mov	r3, r2
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	4413      	add	r3, r2
 8000872:	440b      	add	r3, r1
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d101      	bne.n	800087e <bms_LED_update+0x22>
		{
			ledx = i;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<6; i++)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	2b05      	cmp	r3, #5
 8000888:	ddee      	ble.n	8000868 <bms_LED_update+0xc>
		}
	}

	if (ledx == 0) 		{BAL_B2_OFF; BAL_B1_OFF; BAL_B0_ON;}
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d111      	bne.n	80008b4 <bms_LED_update+0x58>
 8000890:	2200      	movs	r2, #0
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	4847      	ldr	r0, [pc, #284]	; (80009b4 <bms_LED_update+0x158>)
 8000896:	f000 fe21 	bl	80014dc <HAL_GPIO_WritePin>
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a0:	4844      	ldr	r0, [pc, #272]	; (80009b4 <bms_LED_update+0x158>)
 80008a2:	f000 fe1b 	bl	80014dc <HAL_GPIO_WritePin>
 80008a6:	2201      	movs	r2, #1
 80008a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ac:	4841      	ldr	r0, [pc, #260]	; (80009b4 <bms_LED_update+0x158>)
 80008ae:	f000 fe15 	bl	80014dc <HAL_GPIO_WritePin>
	else if (ledx == 2) {BAL_B2_OFF; BAL_B1_ON; BAL_B0_ON;}
	else if (ledx == 3) {BAL_B2_ON; BAL_B1_OFF; BAL_B0_OFF;}
	else if (ledx == 4) {BAL_B2_ON; BAL_B1_OFF; BAL_B0_ON;}
	else if (ledx == 5) {BAL_B2_ON; BAL_B1_ON; BAL_B0_OFF;}
	else 				{BAL_B2_ON; BAL_B1_ON; BAL_B0_ON;}
}
 80008b2:	e079      	b.n	80009a8 <bms_LED_update+0x14c>
	else if (ledx == 1) {BAL_B2_OFF; BAL_B1_ON; BAL_B0_OFF;}
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d111      	bne.n	80008de <bms_LED_update+0x82>
 80008ba:	2200      	movs	r2, #0
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	483d      	ldr	r0, [pc, #244]	; (80009b4 <bms_LED_update+0x158>)
 80008c0:	f000 fe0c 	bl	80014dc <HAL_GPIO_WritePin>
 80008c4:	2201      	movs	r2, #1
 80008c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ca:	483a      	ldr	r0, [pc, #232]	; (80009b4 <bms_LED_update+0x158>)
 80008cc:	f000 fe06 	bl	80014dc <HAL_GPIO_WritePin>
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d6:	4837      	ldr	r0, [pc, #220]	; (80009b4 <bms_LED_update+0x158>)
 80008d8:	f000 fe00 	bl	80014dc <HAL_GPIO_WritePin>
}
 80008dc:	e064      	b.n	80009a8 <bms_LED_update+0x14c>
	else if (ledx == 2) {BAL_B2_OFF; BAL_B1_ON; BAL_B0_ON;}
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d111      	bne.n	8000908 <bms_LED_update+0xac>
 80008e4:	2200      	movs	r2, #0
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	4832      	ldr	r0, [pc, #200]	; (80009b4 <bms_LED_update+0x158>)
 80008ea:	f000 fdf7 	bl	80014dc <HAL_GPIO_WritePin>
 80008ee:	2201      	movs	r2, #1
 80008f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f4:	482f      	ldr	r0, [pc, #188]	; (80009b4 <bms_LED_update+0x158>)
 80008f6:	f000 fdf1 	bl	80014dc <HAL_GPIO_WritePin>
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000900:	482c      	ldr	r0, [pc, #176]	; (80009b4 <bms_LED_update+0x158>)
 8000902:	f000 fdeb 	bl	80014dc <HAL_GPIO_WritePin>
}
 8000906:	e04f      	b.n	80009a8 <bms_LED_update+0x14c>
	else if (ledx == 3) {BAL_B2_ON; BAL_B1_OFF; BAL_B0_OFF;}
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	2b03      	cmp	r3, #3
 800090c:	d111      	bne.n	8000932 <bms_LED_update+0xd6>
 800090e:	2201      	movs	r2, #1
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	4828      	ldr	r0, [pc, #160]	; (80009b4 <bms_LED_update+0x158>)
 8000914:	f000 fde2 	bl	80014dc <HAL_GPIO_WritePin>
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800091e:	4825      	ldr	r0, [pc, #148]	; (80009b4 <bms_LED_update+0x158>)
 8000920:	f000 fddc 	bl	80014dc <HAL_GPIO_WritePin>
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 7100 	mov.w	r1, #512	; 0x200
 800092a:	4822      	ldr	r0, [pc, #136]	; (80009b4 <bms_LED_update+0x158>)
 800092c:	f000 fdd6 	bl	80014dc <HAL_GPIO_WritePin>
}
 8000930:	e03a      	b.n	80009a8 <bms_LED_update+0x14c>
	else if (ledx == 4) {BAL_B2_ON; BAL_B1_OFF; BAL_B0_ON;}
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b04      	cmp	r3, #4
 8000936:	d111      	bne.n	800095c <bms_LED_update+0x100>
 8000938:	2201      	movs	r2, #1
 800093a:	2180      	movs	r1, #128	; 0x80
 800093c:	481d      	ldr	r0, [pc, #116]	; (80009b4 <bms_LED_update+0x158>)
 800093e:	f000 fdcd 	bl	80014dc <HAL_GPIO_WritePin>
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000948:	481a      	ldr	r0, [pc, #104]	; (80009b4 <bms_LED_update+0x158>)
 800094a:	f000 fdc7 	bl	80014dc <HAL_GPIO_WritePin>
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000954:	4817      	ldr	r0, [pc, #92]	; (80009b4 <bms_LED_update+0x158>)
 8000956:	f000 fdc1 	bl	80014dc <HAL_GPIO_WritePin>
}
 800095a:	e025      	b.n	80009a8 <bms_LED_update+0x14c>
	else if (ledx == 5) {BAL_B2_ON; BAL_B1_ON; BAL_B0_OFF;}
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	2b05      	cmp	r3, #5
 8000960:	d111      	bne.n	8000986 <bms_LED_update+0x12a>
 8000962:	2201      	movs	r2, #1
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	4813      	ldr	r0, [pc, #76]	; (80009b4 <bms_LED_update+0x158>)
 8000968:	f000 fdb8 	bl	80014dc <HAL_GPIO_WritePin>
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000972:	4810      	ldr	r0, [pc, #64]	; (80009b4 <bms_LED_update+0x158>)
 8000974:	f000 fdb2 	bl	80014dc <HAL_GPIO_WritePin>
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800097e:	480d      	ldr	r0, [pc, #52]	; (80009b4 <bms_LED_update+0x158>)
 8000980:	f000 fdac 	bl	80014dc <HAL_GPIO_WritePin>
}
 8000984:	e010      	b.n	80009a8 <bms_LED_update+0x14c>
	else 				{BAL_B2_ON; BAL_B1_ON; BAL_B0_ON;}
 8000986:	2201      	movs	r2, #1
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	480a      	ldr	r0, [pc, #40]	; (80009b4 <bms_LED_update+0x158>)
 800098c:	f000 fda6 	bl	80014dc <HAL_GPIO_WritePin>
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000996:	4807      	ldr	r0, [pc, #28]	; (80009b4 <bms_LED_update+0x158>)
 8000998:	f000 fda0 	bl	80014dc <HAL_GPIO_WritePin>
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a2:	4804      	ldr	r0, [pc, #16]	; (80009b4 <bms_LED_update+0x158>)
 80009a4:	f000 fd9a 	bl	80014dc <HAL_GPIO_WritePin>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000028 	.word	0x20000028
 80009b4:	48000800 	.word	0x48000800

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009bc:	f000 f98d 	bl	8000cda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c0:	f000 f80b 	bl	80009da <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c4:	f7ff fc8c 	bl	80002e0 <MX_GPIO_Init>
  MX_CAN1_Init();
 80009c8:	f7ff fc10 	bl	80001ec <MX_CAN1_Init>
  MX_SPI2_Init();
 80009cc:	f000 f85a 	bl	8000a84 <MX_SPI2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  bal_bat_get();
 80009d0:	f7ff fd74 	bl	80004bc <bal_bat_get>
	  bms_LED_update();
 80009d4:	f7ff ff42 	bl	800085c <bms_LED_update>
	  bal_bat_get();
 80009d8:	e7fa      	b.n	80009d0 <main+0x18>

080009da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b096      	sub	sp, #88	; 0x58
 80009de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2244      	movs	r2, #68	; 0x44
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f001 fcaf 	bl	800234c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ee:	463b      	mov	r3, r7
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a00:	f000 fd92 	bl	8001528 <HAL_PWREx_ControlVoltageScaling>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a0a:	f000 f835 	bl	8000a78 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a16:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a20:	2301      	movs	r3, #1
 8000a22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000a24:	2314      	movs	r3, #20
 8000a26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 fdcb 	bl	80015d4 <HAL_RCC_OscConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a44:	f000 f818 	bl	8000a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a48:	230f      	movs	r3, #15
 8000a4a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	2104      	movs	r1, #4
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 f9dd 	bl	8001e20 <HAL_RCC_ClockConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a6c:	f000 f804 	bl	8000a78 <Error_Handler>
  }
}
 8000a70:	bf00      	nop
 8000a72:	3758      	adds	r7, #88	; 0x58
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <Error_Handler+0x8>
	...

08000a84 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_SPI2_Init+0x74>)
 8000a8a:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <MX_SPI2_Init+0x78>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_SPI2_Init+0x74>)
 8000a90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_SPI2_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_SPI2_Init+0x74>)
 8000a9e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000aa2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_SPI2_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_SPI2_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_SPI2_Init+0x74>)
 8000ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_SPI2_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_SPI2_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_SPI2_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_SPI2_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_SPI2_Init+0x74>)
 8000ad2:	2207      	movs	r2, #7
 8000ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_SPI2_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_SPI2_Init+0x74>)
 8000ade:	2208      	movs	r2, #8
 8000ae0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_SPI2_Init+0x74>)
 8000ae4:	f001 fb6a 	bl	80021bc <HAL_SPI_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000aee:	f7ff ffc3 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000006c 	.word	0x2000006c
 8000afc:	40003800 	.word	0x40003800

08000b00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <HAL_SPI_MspInit+0x7c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d128      	bne.n	8000b74 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <HAL_SPI_MspInit+0x80>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b26:	4a16      	ldr	r2, [pc, #88]	; (8000b80 <HAL_SPI_MspInit+0x80>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_SPI_MspInit+0x80>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_SPI_MspInit+0x80>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <HAL_SPI_MspInit+0x80>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_SPI_MspInit+0x80>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b52:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b64:	2305      	movs	r3, #5
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <HAL_SPI_MspInit+0x84>)
 8000b70:	f000 fb0a 	bl	8001188 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40003800 	.word	0x40003800
 8000b80:	40021000 	.word	0x40021000
 8000b84:	48000400 	.word	0x48000400

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_MspInit+0x44>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_MspInit+0x44>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_MspInit+0x44>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_MspInit+0x44>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f8b2 	bl	8000d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <SystemInit+0x5c>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2e:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <SystemInit+0x5c>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <SystemInit+0x60>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a11      	ldr	r2, [pc, #68]	; (8000c84 <SystemInit+0x60>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <SystemInit+0x60>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <SystemInit+0x60>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <SystemInit+0x60>)
 8000c50:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c54:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <SystemInit+0x60>)
 8000c5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c60:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <SystemInit+0x60>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <SystemInit+0x60>)
 8000c68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SystemInit+0x60>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00
 8000c84:	40021000 	.word	0x40021000

08000c88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c8c:	f7ff ffca 	bl	8000c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c92:	e003      	b.n	8000c9c <LoopCopyDataInit>

08000c94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c9a:	3104      	adds	r1, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c9c:	480a      	ldr	r0, [pc, #40]	; (8000cc8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ca0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ca2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ca4:	d3f6      	bcc.n	8000c94 <CopyDataInit>
	ldr	r2, =_sbss
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ca8:	e002      	b.n	8000cb0 <LoopFillZerobss>

08000caa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000caa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cac:	f842 3b04 	str.w	r3, [r2], #4

08000cb0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <LoopForever+0x16>)
	cmp	r2, r3
 8000cb2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cb4:	d3f9      	bcc.n	8000caa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f001 fb25 	bl	8002304 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cba:	f7ff fe7d 	bl	80009b8 <main>

08000cbe <LoopForever>:

LoopForever:
    b LoopForever
 8000cbe:	e7fe      	b.n	8000cbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cc0:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8000cc4:	080023bc 	.word	0x080023bc
	ldr	r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ccc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000cd0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000cd4:	200000d4 	.word	0x200000d4

08000cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC1_2_IRQHandler>

08000cda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 fa1b 	bl	8001120 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cea:	200f      	movs	r0, #15
 8000cec:	f000 f80e 	bl	8000d0c <HAL_InitTick>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	e001      	b.n	8000d00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cfc:	f7ff ff44 	bl	8000b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d00:	79fb      	ldrb	r3, [r7, #7]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <HAL_InitTick+0x6c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d023      	beq.n	8000d68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <HAL_InitTick+0x70>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <HAL_InitTick+0x6c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fa19 	bl	800116e <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10f      	bne.n	8000d62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d809      	bhi.n	8000d5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f000 f9f1 	bl	8001136 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_InitTick+0x74>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	e007      	b.n	8000d6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
 8000d60:	e004      	b.n	8000d6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	e001      	b.n	8000d6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000004 	.word	0x20000004

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x20>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x24>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_IncTick+0x24>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	200000d0 	.word	0x200000d0

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	200000d0 	.word	0x200000d0

08000dc4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e0ed      	b.n	8000fb2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff fa38 	bl	8000258 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 0202 	bic.w	r2, r2, #2
 8000df6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000df8:	f7ff ffd8 	bl	8000dac <HAL_GetTick>
 8000dfc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dfe:	e012      	b.n	8000e26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e00:	f7ff ffd4 	bl	8000dac <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b0a      	cmp	r3, #10
 8000e0c:	d90b      	bls.n	8000e26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2205      	movs	r2, #5
 8000e1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e0c5      	b.n	8000fb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1e5      	bne.n	8000e00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f042 0201 	orr.w	r2, r2, #1
 8000e42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e44:	f7ff ffb2 	bl	8000dac <HAL_GetTick>
 8000e48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e4a:	e012      	b.n	8000e72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e4c:	f7ff ffae 	bl	8000dac <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b0a      	cmp	r3, #10
 8000e58:	d90b      	bls.n	8000e72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2205      	movs	r2, #5
 8000e6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e09f      	b.n	8000fb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0e5      	beq.n	8000e4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7e1b      	ldrb	r3, [r3, #24]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d108      	bne.n	8000e9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	e007      	b.n	8000eaa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ea8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7e5b      	ldrb	r3, [r3, #25]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d108      	bne.n	8000ec4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	e007      	b.n	8000ed4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ed2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7e9b      	ldrb	r3, [r3, #26]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d108      	bne.n	8000eee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0220 	orr.w	r2, r2, #32
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	e007      	b.n	8000efe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0220 	bic.w	r2, r2, #32
 8000efc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7edb      	ldrb	r3, [r3, #27]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d108      	bne.n	8000f18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0210 	bic.w	r2, r2, #16
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e007      	b.n	8000f28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 0210 	orr.w	r2, r2, #16
 8000f26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	7f1b      	ldrb	r3, [r3, #28]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d108      	bne.n	8000f42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0208 	orr.w	r2, r2, #8
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	e007      	b.n	8000f52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0208 	bic.w	r2, r2, #8
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7f5b      	ldrb	r3, [r3, #29]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d108      	bne.n	8000f6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f042 0204 	orr.w	r2, r2, #4
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	e007      	b.n	8000f7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0204 	bic.w	r2, r2, #4
 8000f7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	431a      	orrs	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	ea42 0103 	orr.w	r1, r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	1e5a      	subs	r2, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ec:	d301      	bcc.n	80010f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00f      	b.n	8001112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <SysTick_Config+0x40>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fa:	210f      	movs	r1, #15
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f7ff ff8e 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <SysTick_Config+0x40>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <SysTick_Config+0x40>)
 800110c:	2207      	movs	r2, #7
 800110e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	e000e010 	.word	0xe000e010

08001120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff47 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001148:	f7ff ff5c 	bl	8001004 <__NVIC_GetPriorityGrouping>
 800114c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f7ff ff8e 	bl	8001074 <NVIC_EncodePriority>
 8001158:	4602      	mov	r2, r0
 800115a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff5d 	bl	8001020 <__NVIC_SetPriority>
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ffb0 	bl	80010dc <SysTick_Config>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001196:	e166      	b.n	8001466 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2101      	movs	r1, #1
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	4013      	ands	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 8158 	beq.w	8001460 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d00b      	beq.n	80011d0 <HAL_GPIO_Init+0x48>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d007      	beq.n	80011d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c4:	2b11      	cmp	r3, #17
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b12      	cmp	r3, #18
 80011ce:	d130      	bne.n	8001232 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001206:	2201      	movs	r2, #1
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	f003 0201 	and.w	r2, r3, #1
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0xea>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b12      	cmp	r3, #18
 8001270:	d123      	bne.n	80012ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	220f      	movs	r2, #15
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	691a      	ldr	r2, [r3, #16]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	08da      	lsrs	r2, r3, #3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3208      	adds	r2, #8
 80012b4:	6939      	ldr	r1, [r7, #16]
 80012b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0203 	and.w	r2, r3, #3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 80b2 	beq.w	8001460 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fc:	4b61      	ldr	r3, [pc, #388]	; (8001484 <HAL_GPIO_Init+0x2fc>)
 80012fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001300:	4a60      	ldr	r2, [pc, #384]	; (8001484 <HAL_GPIO_Init+0x2fc>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6613      	str	r3, [r2, #96]	; 0x60
 8001308:	4b5e      	ldr	r3, [pc, #376]	; (8001484 <HAL_GPIO_Init+0x2fc>)
 800130a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001314:	4a5c      	ldr	r2, [pc, #368]	; (8001488 <HAL_GPIO_Init+0x300>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3302      	adds	r3, #2
 800131c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	220f      	movs	r2, #15
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800133e:	d02b      	beq.n	8001398 <HAL_GPIO_Init+0x210>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a52      	ldr	r2, [pc, #328]	; (800148c <HAL_GPIO_Init+0x304>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d025      	beq.n	8001394 <HAL_GPIO_Init+0x20c>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a51      	ldr	r2, [pc, #324]	; (8001490 <HAL_GPIO_Init+0x308>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d01f      	beq.n	8001390 <HAL_GPIO_Init+0x208>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a50      	ldr	r2, [pc, #320]	; (8001494 <HAL_GPIO_Init+0x30c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d019      	beq.n	800138c <HAL_GPIO_Init+0x204>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a4f      	ldr	r2, [pc, #316]	; (8001498 <HAL_GPIO_Init+0x310>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d013      	beq.n	8001388 <HAL_GPIO_Init+0x200>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a4e      	ldr	r2, [pc, #312]	; (800149c <HAL_GPIO_Init+0x314>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d00d      	beq.n	8001384 <HAL_GPIO_Init+0x1fc>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a4d      	ldr	r2, [pc, #308]	; (80014a0 <HAL_GPIO_Init+0x318>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d007      	beq.n	8001380 <HAL_GPIO_Init+0x1f8>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a4c      	ldr	r2, [pc, #304]	; (80014a4 <HAL_GPIO_Init+0x31c>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d101      	bne.n	800137c <HAL_GPIO_Init+0x1f4>
 8001378:	2307      	movs	r3, #7
 800137a:	e00e      	b.n	800139a <HAL_GPIO_Init+0x212>
 800137c:	2308      	movs	r3, #8
 800137e:	e00c      	b.n	800139a <HAL_GPIO_Init+0x212>
 8001380:	2306      	movs	r3, #6
 8001382:	e00a      	b.n	800139a <HAL_GPIO_Init+0x212>
 8001384:	2305      	movs	r3, #5
 8001386:	e008      	b.n	800139a <HAL_GPIO_Init+0x212>
 8001388:	2304      	movs	r3, #4
 800138a:	e006      	b.n	800139a <HAL_GPIO_Init+0x212>
 800138c:	2303      	movs	r3, #3
 800138e:	e004      	b.n	800139a <HAL_GPIO_Init+0x212>
 8001390:	2302      	movs	r3, #2
 8001392:	e002      	b.n	800139a <HAL_GPIO_Init+0x212>
 8001394:	2301      	movs	r3, #1
 8001396:	e000      	b.n	800139a <HAL_GPIO_Init+0x212>
 8001398:	2300      	movs	r3, #0
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	f002 0203 	and.w	r2, r2, #3
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	4093      	lsls	r3, r2
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013aa:	4937      	ldr	r1, [pc, #220]	; (8001488 <HAL_GPIO_Init+0x300>)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	3302      	adds	r3, #2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013b8:	4b3b      	ldr	r3, [pc, #236]	; (80014a8 <HAL_GPIO_Init+0x320>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013dc:	4a32      	ldr	r2, [pc, #200]	; (80014a8 <HAL_GPIO_Init+0x320>)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80013e2:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <HAL_GPIO_Init+0x320>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001406:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <HAL_GPIO_Init+0x320>)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800140c:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <HAL_GPIO_Init+0x320>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001430:	4a1d      	ldr	r2, [pc, #116]	; (80014a8 <HAL_GPIO_Init+0x320>)
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <HAL_GPIO_Init+0x320>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43db      	mvns	r3, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <HAL_GPIO_Init+0x320>)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3301      	adds	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	f47f ae91 	bne.w	8001198 <HAL_GPIO_Init+0x10>
  }
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	371c      	adds	r7, #28
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	40021000 	.word	0x40021000
 8001488:	40010000 	.word	0x40010000
 800148c:	48000400 	.word	0x48000400
 8001490:	48000800 	.word	0x48000800
 8001494:	48000c00 	.word	0x48000c00
 8001498:	48001000 	.word	0x48001000
 800149c:	48001400 	.word	0x48001400
 80014a0:	48001800 	.word	0x48001800
 80014a4:	48001c00 	.word	0x48001c00
 80014a8:	40010400 	.word	0x40010400

080014ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	887b      	ldrh	r3, [r7, #2]
 80014be:	4013      	ands	r3, r2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d002      	beq.n	80014ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
 80014c8:	e001      	b.n	80014ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ca:	2300      	movs	r3, #0
 80014cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014f8:	e002      	b.n	8001500 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <HAL_PWREx_GetVoltageRange+0x18>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40007000 	.word	0x40007000

08001528 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001536:	d130      	bne.n	800159a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001538:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001544:	d038      	beq.n	80015b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800154e:	4a1e      	ldr	r2, [pc, #120]	; (80015c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001550:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001554:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2232      	movs	r2, #50	; 0x32
 800155c:	fb02 f303 	mul.w	r3, r2, r3
 8001560:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001562:	fba2 2303 	umull	r2, r3, r2, r3
 8001566:	0c9b      	lsrs	r3, r3, #18
 8001568:	3301      	adds	r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800156c:	e002      	b.n	8001574 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	3b01      	subs	r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800157c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001580:	d102      	bne.n	8001588 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f2      	bne.n	800156e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001594:	d110      	bne.n	80015b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e00f      	b.n	80015ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a6:	d007      	beq.n	80015b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015b0:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40007000 	.word	0x40007000
 80015cc:	20000000 	.word	0x20000000
 80015d0:	431bde83 	.word	0x431bde83

080015d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d102      	bne.n	80015e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	f000 bc16 	b.w	8001e14 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e8:	4ba0      	ldr	r3, [pc, #640]	; (800186c <HAL_RCC_OscConfig+0x298>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015f2:	4b9e      	ldr	r3, [pc, #632]	; (800186c <HAL_RCC_OscConfig+0x298>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 80e4 	beq.w	80017d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d007      	beq.n	8001620 <HAL_RCC_OscConfig+0x4c>
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2b0c      	cmp	r3, #12
 8001614:	f040 808b 	bne.w	800172e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	2b01      	cmp	r3, #1
 800161c:	f040 8087 	bne.w	800172e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001620:	4b92      	ldr	r3, [pc, #584]	; (800186c <HAL_RCC_OscConfig+0x298>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_OscConfig+0x64>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e3ed      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a1a      	ldr	r2, [r3, #32]
 800163c:	4b8b      	ldr	r3, [pc, #556]	; (800186c <HAL_RCC_OscConfig+0x298>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b00      	cmp	r3, #0
 8001646:	d004      	beq.n	8001652 <HAL_RCC_OscConfig+0x7e>
 8001648:	4b88      	ldr	r3, [pc, #544]	; (800186c <HAL_RCC_OscConfig+0x298>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001650:	e005      	b.n	800165e <HAL_RCC_OscConfig+0x8a>
 8001652:	4b86      	ldr	r3, [pc, #536]	; (800186c <HAL_RCC_OscConfig+0x298>)
 8001654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800165e:	4293      	cmp	r3, r2
 8001660:	d223      	bcs.n	80016aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	4618      	mov	r0, r3
 8001668:	f000 fd48 	bl	80020fc <RCC_SetFlashLatencyFromMSIRange>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e3ce      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001676:	4b7d      	ldr	r3, [pc, #500]	; (800186c <HAL_RCC_OscConfig+0x298>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a7c      	ldr	r2, [pc, #496]	; (800186c <HAL_RCC_OscConfig+0x298>)
 800167c:	f043 0308 	orr.w	r3, r3, #8
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b7a      	ldr	r3, [pc, #488]	; (800186c <HAL_RCC_OscConfig+0x298>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4977      	ldr	r1, [pc, #476]	; (800186c <HAL_RCC_OscConfig+0x298>)
 8001690:	4313      	orrs	r3, r2
 8001692:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001694:	4b75      	ldr	r3, [pc, #468]	; (800186c <HAL_RCC_OscConfig+0x298>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	4972      	ldr	r1, [pc, #456]	; (800186c <HAL_RCC_OscConfig+0x298>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
 80016a8:	e025      	b.n	80016f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016aa:	4b70      	ldr	r3, [pc, #448]	; (800186c <HAL_RCC_OscConfig+0x298>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a6f      	ldr	r2, [pc, #444]	; (800186c <HAL_RCC_OscConfig+0x298>)
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	4b6d      	ldr	r3, [pc, #436]	; (800186c <HAL_RCC_OscConfig+0x298>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	496a      	ldr	r1, [pc, #424]	; (800186c <HAL_RCC_OscConfig+0x298>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016c8:	4b68      	ldr	r3, [pc, #416]	; (800186c <HAL_RCC_OscConfig+0x298>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	4965      	ldr	r1, [pc, #404]	; (800186c <HAL_RCC_OscConfig+0x298>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d109      	bne.n	80016f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 fd08 	bl	80020fc <RCC_SetFlashLatencyFromMSIRange>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e38e      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016f6:	f000 fc75 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 80016fa:	4602      	mov	r2, r0
 80016fc:	4b5b      	ldr	r3, [pc, #364]	; (800186c <HAL_RCC_OscConfig+0x298>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	495a      	ldr	r1, [pc, #360]	; (8001870 <HAL_RCC_OscConfig+0x29c>)
 8001708:	5ccb      	ldrb	r3, [r1, r3]
 800170a:	f003 031f 	and.w	r3, r3, #31
 800170e:	fa22 f303 	lsr.w	r3, r2, r3
 8001712:	4a58      	ldr	r2, [pc, #352]	; (8001874 <HAL_RCC_OscConfig+0x2a0>)
 8001714:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001716:	4b58      	ldr	r3, [pc, #352]	; (8001878 <HAL_RCC_OscConfig+0x2a4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff faf6 	bl	8000d0c <HAL_InitTick>
 8001720:	4603      	mov	r3, r0
 8001722:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d052      	beq.n	80017d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	e372      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d032      	beq.n	800179c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001736:	4b4d      	ldr	r3, [pc, #308]	; (800186c <HAL_RCC_OscConfig+0x298>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a4c      	ldr	r2, [pc, #304]	; (800186c <HAL_RCC_OscConfig+0x298>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001742:	f7ff fb33 	bl	8000dac <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800174a:	f7ff fb2f 	bl	8000dac <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e35b      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800175c:	4b43      	ldr	r3, [pc, #268]	; (800186c <HAL_RCC_OscConfig+0x298>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001768:	4b40      	ldr	r3, [pc, #256]	; (800186c <HAL_RCC_OscConfig+0x298>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a3f      	ldr	r2, [pc, #252]	; (800186c <HAL_RCC_OscConfig+0x298>)
 800176e:	f043 0308 	orr.w	r3, r3, #8
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b3d      	ldr	r3, [pc, #244]	; (800186c <HAL_RCC_OscConfig+0x298>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	493a      	ldr	r1, [pc, #232]	; (800186c <HAL_RCC_OscConfig+0x298>)
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001786:	4b39      	ldr	r3, [pc, #228]	; (800186c <HAL_RCC_OscConfig+0x298>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	4935      	ldr	r1, [pc, #212]	; (800186c <HAL_RCC_OscConfig+0x298>)
 8001796:	4313      	orrs	r3, r2
 8001798:	604b      	str	r3, [r1, #4]
 800179a:	e01a      	b.n	80017d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800179c:	4b33      	ldr	r3, [pc, #204]	; (800186c <HAL_RCC_OscConfig+0x298>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a32      	ldr	r2, [pc, #200]	; (800186c <HAL_RCC_OscConfig+0x298>)
 80017a2:	f023 0301 	bic.w	r3, r3, #1
 80017a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017a8:	f7ff fb00 	bl	8000dac <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017b0:	f7ff fafc 	bl	8000dac <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e328      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017c2:	4b2a      	ldr	r3, [pc, #168]	; (800186c <HAL_RCC_OscConfig+0x298>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x1dc>
 80017ce:	e000      	b.n	80017d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d073      	beq.n	80018c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_OscConfig+0x21c>
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2b0c      	cmp	r3, #12
 80017e8:	d10e      	bne.n	8001808 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d10b      	bne.n	8001808 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f0:	4b1e      	ldr	r3, [pc, #120]	; (800186c <HAL_RCC_OscConfig+0x298>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d063      	beq.n	80018c4 <HAL_RCC_OscConfig+0x2f0>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d15f      	bne.n	80018c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e305      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001810:	d106      	bne.n	8001820 <HAL_RCC_OscConfig+0x24c>
 8001812:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_RCC_OscConfig+0x298>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a15      	ldr	r2, [pc, #84]	; (800186c <HAL_RCC_OscConfig+0x298>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e01d      	b.n	800185c <HAL_RCC_OscConfig+0x288>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0x270>
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_RCC_OscConfig+0x298>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a0f      	ldr	r2, [pc, #60]	; (800186c <HAL_RCC_OscConfig+0x298>)
 8001830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_RCC_OscConfig+0x298>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a0c      	ldr	r2, [pc, #48]	; (800186c <HAL_RCC_OscConfig+0x298>)
 800183c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0x288>
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_RCC_OscConfig+0x298>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a08      	ldr	r2, [pc, #32]	; (800186c <HAL_RCC_OscConfig+0x298>)
 800184a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_RCC_OscConfig+0x298>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a05      	ldr	r2, [pc, #20]	; (800186c <HAL_RCC_OscConfig+0x298>)
 8001856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d01b      	beq.n	800189c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff faa2 	bl	8000dac <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800186a:	e010      	b.n	800188e <HAL_RCC_OscConfig+0x2ba>
 800186c:	40021000 	.word	0x40021000
 8001870:	08002374 	.word	0x08002374
 8001874:	20000000 	.word	0x20000000
 8001878:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff fa96 	bl	8000dac <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e2c2      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188e:	4baf      	ldr	r3, [pc, #700]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x2a8>
 800189a:	e014      	b.n	80018c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff fa86 	bl	8000dac <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff fa82 	bl	8000dac <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	; 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e2ae      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b6:	4ba5      	ldr	r3, [pc, #660]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x2d0>
 80018c2:	e000      	b.n	80018c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d060      	beq.n	8001994 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_OscConfig+0x310>
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2b0c      	cmp	r3, #12
 80018dc:	d119      	bne.n	8001912 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d116      	bne.n	8001912 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e4:	4b99      	ldr	r3, [pc, #612]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_RCC_OscConfig+0x328>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e28b      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fc:	4b93      	ldr	r3, [pc, #588]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	061b      	lsls	r3, r3, #24
 800190a:	4990      	ldr	r1, [pc, #576]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 800190c:	4313      	orrs	r3, r2
 800190e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001910:	e040      	b.n	8001994 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d023      	beq.n	8001962 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800191a:	4b8c      	ldr	r3, [pc, #560]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a8b      	ldr	r2, [pc, #556]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001926:	f7ff fa41 	bl	8000dac <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800192e:	f7ff fa3d 	bl	8000dac <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e269      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001940:	4b82      	ldr	r3, [pc, #520]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194c:	4b7f      	ldr	r3, [pc, #508]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	061b      	lsls	r3, r3, #24
 800195a:	497c      	ldr	r1, [pc, #496]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
 8001960:	e018      	b.n	8001994 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001962:	4b7a      	ldr	r3, [pc, #488]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a79      	ldr	r2, [pc, #484]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800196c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7ff fa1d 	bl	8000dac <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001976:	f7ff fa19 	bl	8000dac <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e245      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001988:	4b70      	ldr	r3, [pc, #448]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f0      	bne.n	8001976 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d03c      	beq.n	8001a1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d01c      	beq.n	80019e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a8:	4b68      	ldr	r3, [pc, #416]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 80019aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ae:	4a67      	ldr	r2, [pc, #412]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b8:	f7ff f9f8 	bl	8000dac <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c0:	f7ff f9f4 	bl	8000dac <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e220      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019d2:	4b5e      	ldr	r3, [pc, #376]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 80019d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0ef      	beq.n	80019c0 <HAL_RCC_OscConfig+0x3ec>
 80019e0:	e01b      	b.n	8001a1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e2:	4b5a      	ldr	r3, [pc, #360]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 80019e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e8:	4a58      	ldr	r2, [pc, #352]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 80019ea:	f023 0301 	bic.w	r3, r3, #1
 80019ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f2:	f7ff f9db 	bl	8000dac <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019fa:	f7ff f9d7 	bl	8000dac <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e203      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a0c:	4b4f      	ldr	r3, [pc, #316]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1ef      	bne.n	80019fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 80a6 	beq.w	8001b74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a2c:	4b47      	ldr	r3, [pc, #284]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10d      	bne.n	8001a54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a38:	4b44      	ldr	r3, [pc, #272]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3c:	4a43      	ldr	r2, [pc, #268]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a42:	6593      	str	r3, [r2, #88]	; 0x58
 8001a44:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a50:	2301      	movs	r3, #1
 8001a52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a54:	4b3e      	ldr	r3, [pc, #248]	; (8001b50 <HAL_RCC_OscConfig+0x57c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d118      	bne.n	8001a92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a60:	4b3b      	ldr	r3, [pc, #236]	; (8001b50 <HAL_RCC_OscConfig+0x57c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a3a      	ldr	r2, [pc, #232]	; (8001b50 <HAL_RCC_OscConfig+0x57c>)
 8001a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a6c:	f7ff f99e 	bl	8000dac <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a74:	f7ff f99a 	bl	8000dac <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e1c6      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a86:	4b32      	ldr	r3, [pc, #200]	; (8001b50 <HAL_RCC_OscConfig+0x57c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d108      	bne.n	8001aac <HAL_RCC_OscConfig+0x4d8>
 8001a9a:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa0:	4a2a      	ldr	r2, [pc, #168]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aaa:	e024      	b.n	8001af6 <HAL_RCC_OscConfig+0x522>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b05      	cmp	r3, #5
 8001ab2:	d110      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x502>
 8001ab4:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aba:	4a24      	ldr	r2, [pc, #144]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ac4:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aca:	4a20      	ldr	r2, [pc, #128]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad4:	e00f      	b.n	8001af6 <HAL_RCC_OscConfig+0x522>
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001adc:	4a1b      	ldr	r2, [pc, #108]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001ade:	f023 0301 	bic.w	r3, r3, #1
 8001ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae6:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aec:	4a17      	ldr	r2, [pc, #92]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001aee:	f023 0304 	bic.w	r3, r3, #4
 8001af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d016      	beq.n	8001b2c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afe:	f7ff f955 	bl	8000dac <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b04:	e00a      	b.n	8001b1c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7ff f951 	bl	8000dac <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e17b      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_RCC_OscConfig+0x578>)
 8001b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0ed      	beq.n	8001b06 <HAL_RCC_OscConfig+0x532>
 8001b2a:	e01a      	b.n	8001b62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7ff f93e 	bl	8000dac <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b32:	e00f      	b.n	8001b54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b34:	f7ff f93a 	bl	8000dac <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d906      	bls.n	8001b54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e164      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b54:	4ba8      	ldr	r3, [pc, #672]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1e8      	bne.n	8001b34 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b62:	7ffb      	ldrb	r3, [r7, #31]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b68:	4ba3      	ldr	r3, [pc, #652]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6c:	4aa2      	ldr	r2, [pc, #648]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0320 	and.w	r3, r3, #32
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d03c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d01c      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b88:	4b9b      	ldr	r3, [pc, #620]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b8e:	4a9a      	ldr	r2, [pc, #616]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b98:	f7ff f908 	bl	8000dac <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ba0:	f7ff f904 	bl	8000dac <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e130      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bb2:	4b91      	ldr	r3, [pc, #580]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0ef      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x5cc>
 8001bc0:	e01b      	b.n	8001bfa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bc2:	4b8d      	ldr	r3, [pc, #564]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001bc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bc8:	4a8b      	ldr	r2, [pc, #556]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd2:	f7ff f8eb 	bl	8000dac <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bda:	f7ff f8e7 	bl	8000dac <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e113      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bec:	4b82      	ldr	r3, [pc, #520]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1ef      	bne.n	8001bda <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8107 	beq.w	8001e12 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	f040 80cb 	bne.w	8001da4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c0e:	4b7a      	ldr	r3, [pc, #488]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f003 0203 	and.w	r2, r3, #3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d12c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d123      	bne.n	8001c7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d11b      	bne.n	8001c7c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d113      	bne.n	8001c7c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5e:	085b      	lsrs	r3, r3, #1
 8001c60:	3b01      	subs	r3, #1
 8001c62:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d109      	bne.n	8001c7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	085b      	lsrs	r3, r3, #1
 8001c74:	3b01      	subs	r3, #1
 8001c76:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d06d      	beq.n	8001d58 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d068      	beq.n	8001d54 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c82:	4b5d      	ldr	r3, [pc, #372]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d105      	bne.n	8001c9a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c8e:	4b5a      	ldr	r3, [pc, #360]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e0ba      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c9e:	4b56      	ldr	r3, [pc, #344]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a55      	ldr	r2, [pc, #340]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001ca4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ca8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001caa:	f7ff f87f 	bl	8000dac <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb2:	f7ff f87b 	bl	8000dac <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e0a7      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc4:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1f0      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd0:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	4b49      	ldr	r3, [pc, #292]	; (8001dfc <HAL_RCC_OscConfig+0x828>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ce0:	3a01      	subs	r2, #1
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	4311      	orrs	r1, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cea:	0212      	lsls	r2, r2, #8
 8001cec:	4311      	orrs	r1, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cf2:	0852      	lsrs	r2, r2, #1
 8001cf4:	3a01      	subs	r2, #1
 8001cf6:	0552      	lsls	r2, r2, #21
 8001cf8:	4311      	orrs	r1, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cfe:	0852      	lsrs	r2, r2, #1
 8001d00:	3a01      	subs	r2, #1
 8001d02:	0652      	lsls	r2, r2, #25
 8001d04:	4311      	orrs	r1, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d0a:	06d2      	lsls	r2, r2, #27
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	493a      	ldr	r1, [pc, #232]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d14:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a37      	ldr	r2, [pc, #220]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d20:	4b35      	ldr	r3, [pc, #212]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	4a34      	ldr	r2, [pc, #208]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d2c:	f7ff f83e 	bl	8000dac <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d34:	f7ff f83a 	bl	8000dac <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e066      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d46:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d52:	e05e      	b.n	8001e12 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e05d      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d58:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d156      	bne.n	8001e12 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d64:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d70:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4a20      	ldr	r2, [pc, #128]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d7c:	f7ff f816 	bl	8000dac <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d84:	f7ff f812 	bl	8000dac <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e03e      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d96:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0x7b0>
 8001da2:	e036      	b.n	8001e12 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	2b0c      	cmp	r3, #12
 8001da8:	d031      	beq.n	8001e0e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001db0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001db4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d105      	bne.n	8001dce <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001dc8:	f023 0303 	bic.w	r3, r3, #3
 8001dcc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <HAL_RCC_OscConfig+0x824>)
 8001dd4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ddc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dde:	f7fe ffe5 	bl	8000dac <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de4:	e00c      	b.n	8001e00 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de6:	f7fe ffe1 	bl	8000dac <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d905      	bls.n	8001e00 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e00d      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_RCC_OscConfig+0x848>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1ec      	bne.n	8001de6 <HAL_RCC_OscConfig+0x812>
 8001e0c:	e001      	b.n	8001e12 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3720      	adds	r7, #32
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000

08001e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0c8      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e34:	4b66      	ldr	r3, [pc, #408]	; (8001fd0 <HAL_RCC_ClockConfig+0x1b0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d910      	bls.n	8001e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e42:	4b63      	ldr	r3, [pc, #396]	; (8001fd0 <HAL_RCC_ClockConfig+0x1b0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 0207 	bic.w	r2, r3, #7
 8001e4a:	4961      	ldr	r1, [pc, #388]	; (8001fd0 <HAL_RCC_ClockConfig+0x1b0>)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e52:	4b5f      	ldr	r3, [pc, #380]	; (8001fd0 <HAL_RCC_ClockConfig+0x1b0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d001      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0b0      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d04c      	beq.n	8001f0a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d107      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e78:	4b56      	ldr	r3, [pc, #344]	; (8001fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d121      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e09e      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d107      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e90:	4b50      	ldr	r3, [pc, #320]	; (8001fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d115      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e092      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ea8:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d109      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e086      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb8:	4b46      	ldr	r3, [pc, #280]	; (8001fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e07e      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ec8:	4b42      	ldr	r3, [pc, #264]	; (8001fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 0203 	bic.w	r2, r3, #3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	493f      	ldr	r1, [pc, #252]	; (8001fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eda:	f7fe ff67 	bl	8000dac <HAL_GetTick>
 8001ede:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee0:	e00a      	b.n	8001ef8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee2:	f7fe ff63 	bl	8000dac <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e066      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef8:	4b36      	ldr	r3, [pc, #216]	; (8001fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 020c 	and.w	r2, r3, #12
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d1eb      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d008      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f16:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	492c      	ldr	r1, [pc, #176]	; (8001fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f28:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d210      	bcs.n	8001f58 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 0207 	bic.w	r2, r3, #7
 8001f3e:	4924      	ldr	r1, [pc, #144]	; (8001fd0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e036      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d008      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f64:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4918      	ldr	r1, [pc, #96]	; (8001fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f82:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4910      	ldr	r1, [pc, #64]	; (8001fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f96:	f000 f825 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa8:	5ccb      	ldrb	r3, [r1, r3]
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fea6 	bl	8000d0c <HAL_InitTick>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fc4:	7afb      	ldrb	r3, [r7, #11]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40022000 	.word	0x40022000
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08002374 	.word	0x08002374
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	20000004 	.word	0x20000004

08001fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ff2:	4b3e      	ldr	r3, [pc, #248]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ffc:	4b3b      	ldr	r3, [pc, #236]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0x34>
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	2b0c      	cmp	r3, #12
 8002010:	d121      	bne.n	8002056 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d11e      	bne.n	8002056 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002018:	4b34      	ldr	r3, [pc, #208]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d107      	bne.n	8002034 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002024:	4b31      	ldr	r3, [pc, #196]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202a:	0a1b      	lsrs	r3, r3, #8
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	e005      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002034:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002040:	4a2b      	ldr	r2, [pc, #172]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002048:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10d      	bne.n	800206c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002054:	e00a      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d102      	bne.n	8002062 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800205c:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800205e:	61bb      	str	r3, [r7, #24]
 8002060:	e004      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b08      	cmp	r3, #8
 8002066:	d101      	bne.n	800206c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002068:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800206a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	2b0c      	cmp	r3, #12
 8002070:	d134      	bne.n	80020dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002072:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d003      	beq.n	800208a <HAL_RCC_GetSysClockFreq+0xa6>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d003      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0xac>
 8002088:	e005      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800208a:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800208c:	617b      	str	r3, [r7, #20]
      break;
 800208e:	e005      	b.n	800209c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002090:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002092:	617b      	str	r3, [r7, #20]
      break;
 8002094:	e002      	b.n	800209c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	617b      	str	r3, [r7, #20]
      break;
 800209a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	3301      	adds	r3, #1
 80020a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	fb02 f203 	mul.w	r2, r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	0e5b      	lsrs	r3, r3, #25
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	3301      	adds	r3, #1
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020dc:	69bb      	ldr	r3, [r7, #24]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	08002384 	.word	0x08002384
 80020f4:	00f42400 	.word	0x00f42400
 80020f8:	007a1200 	.word	0x007a1200

080020fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002108:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002114:	f7ff f9fa 	bl	800150c <HAL_PWREx_GetVoltageRange>
 8002118:	6178      	str	r0, [r7, #20]
 800211a:	e014      	b.n	8002146 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	4a24      	ldr	r2, [pc, #144]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002126:	6593      	str	r3, [r2, #88]	; 0x58
 8002128:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002134:	f7ff f9ea 	bl	800150c <HAL_PWREx_GetVoltageRange>
 8002138:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800213a:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002144:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800214c:	d10b      	bne.n	8002166 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b80      	cmp	r3, #128	; 0x80
 8002152:	d919      	bls.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2ba0      	cmp	r3, #160	; 0xa0
 8002158:	d902      	bls.n	8002160 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800215a:	2302      	movs	r3, #2
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	e013      	b.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002160:	2301      	movs	r3, #1
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	e010      	b.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b80      	cmp	r3, #128	; 0x80
 800216a:	d902      	bls.n	8002172 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800216c:	2303      	movs	r3, #3
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	e00a      	b.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b80      	cmp	r3, #128	; 0x80
 8002176:	d102      	bne.n	800217e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002178:	2302      	movs	r3, #2
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	e004      	b.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b70      	cmp	r3, #112	; 0x70
 8002182:	d101      	bne.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002184:	2301      	movs	r3, #1
 8002186:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f023 0207 	bic.w	r2, r3, #7
 8002190:	4909      	ldr	r1, [pc, #36]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002198:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d001      	beq.n	80021aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40022000 	.word	0x40022000

080021bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e095      	b.n	80022fa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d108      	bne.n	80021e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021de:	d009      	beq.n	80021f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	61da      	str	r2, [r3, #28]
 80021e6:	e005      	b.n	80021f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d106      	bne.n	8002214 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7fe fc76 	bl	8000b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800222a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002234:	d902      	bls.n	800223c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	e002      	b.n	8002242 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800223c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002240:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800224a:	d007      	beq.n	800225c <HAL_SPI_Init+0xa0>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002254:	d002      	beq.n	800225c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229e:	ea42 0103 	orr.w	r1, r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	0c1b      	lsrs	r3, r3, #16
 80022b8:	f003 0204 	and.w	r2, r3, #4
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80022d8:	ea42 0103 	orr.w	r1, r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <__libc_init_array>:
 8002304:	b570      	push	{r4, r5, r6, lr}
 8002306:	4d0d      	ldr	r5, [pc, #52]	; (800233c <__libc_init_array+0x38>)
 8002308:	4c0d      	ldr	r4, [pc, #52]	; (8002340 <__libc_init_array+0x3c>)
 800230a:	1b64      	subs	r4, r4, r5
 800230c:	10a4      	asrs	r4, r4, #2
 800230e:	2600      	movs	r6, #0
 8002310:	42a6      	cmp	r6, r4
 8002312:	d109      	bne.n	8002328 <__libc_init_array+0x24>
 8002314:	4d0b      	ldr	r5, [pc, #44]	; (8002344 <__libc_init_array+0x40>)
 8002316:	4c0c      	ldr	r4, [pc, #48]	; (8002348 <__libc_init_array+0x44>)
 8002318:	f000 f820 	bl	800235c <_init>
 800231c:	1b64      	subs	r4, r4, r5
 800231e:	10a4      	asrs	r4, r4, #2
 8002320:	2600      	movs	r6, #0
 8002322:	42a6      	cmp	r6, r4
 8002324:	d105      	bne.n	8002332 <__libc_init_array+0x2e>
 8002326:	bd70      	pop	{r4, r5, r6, pc}
 8002328:	f855 3b04 	ldr.w	r3, [r5], #4
 800232c:	4798      	blx	r3
 800232e:	3601      	adds	r6, #1
 8002330:	e7ee      	b.n	8002310 <__libc_init_array+0xc>
 8002332:	f855 3b04 	ldr.w	r3, [r5], #4
 8002336:	4798      	blx	r3
 8002338:	3601      	adds	r6, #1
 800233a:	e7f2      	b.n	8002322 <__libc_init_array+0x1e>
 800233c:	080023b4 	.word	0x080023b4
 8002340:	080023b4 	.word	0x080023b4
 8002344:	080023b4 	.word	0x080023b4
 8002348:	080023b8 	.word	0x080023b8

0800234c <memset>:
 800234c:	4402      	add	r2, r0
 800234e:	4603      	mov	r3, r0
 8002350:	4293      	cmp	r3, r2
 8002352:	d100      	bne.n	8002356 <memset+0xa>
 8002354:	4770      	bx	lr
 8002356:	f803 1b01 	strb.w	r1, [r3], #1
 800235a:	e7f9      	b.n	8002350 <memset+0x4>

0800235c <_init>:
 800235c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235e:	bf00      	nop
 8002360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002362:	bc08      	pop	{r3}
 8002364:	469e      	mov	lr, r3
 8002366:	4770      	bx	lr

08002368 <_fini>:
 8002368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236a:	bf00      	nop
 800236c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800236e:	bc08      	pop	{r3}
 8002370:	469e      	mov	lr, r3
 8002372:	4770      	bx	lr
